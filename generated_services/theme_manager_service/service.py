# THIS FILE WAS AUTO-GENERATED BY THE FLOWORK CORE COMPILER
from flowork_kernel.services.base_service import BaseService
import os
import json
import importlib.util
import shutil
import datetime
class ThemeManagerService(BaseService):
    def __init__(self, kernel, service_id: str):
        super().__init__(kernel, service_id)
        self.logger = self.kernel.write_to_log
    def get_colors(self, *args, **kwargs):
        # This entire method was translated from a visual workflow.
        kernel = self.kernel
        log = self.logger
        payload = {'data': {'args': args, 'kwargs': kwargs}, 'history': []}
        # Dictionary to store results of each node
        node_results = {}

        # --- Executing Node: get_colors ---
        try:
            current_payload = payload
            def temp_func(payload, log, kernel, args, json, os, importlib):
                # ADDED: This node replicates the get_colors() method.
                # It gets the active theme from settings and returns its color data.
                loc = kernel.get_service("localization_manager")
                if not loc:
                    # Fallback if the localization service isn't ready for some reason
                    return {}
                
                active_theme_id = loc.get_setting("theme", "flowork_default")
                themes_path = kernel.themes_path
                theme_file = os.path.join(themes_path, f"{active_theme_id}.json")
                
                if not os.path.exists(theme_file):
                    # Fallback to default if the specific theme file is missing
                    theme_file = os.path.join(themes_path, "flowork_default.json")
                    if not os.path.exists(theme_file):
                        return {}
                
                try:
                    with open(theme_file, 'r', encoding='utf-8') as f:
                        theme_data = json.load(f)
                    return theme_data.get("colors", {})
                except Exception as e:
                    log(f'ThemeManagerWorkflow(get_colors): Error loading theme file {active_theme_id}: {e}', 'ERROR')
                    return {}
            node_results['get_colors_node'] = temp_func(current_payload, log, kernel, current_payload.get('data',{}).get('args', []), json, os, importlib.util)
        except Exception as e:
            self.logger(f'Error executing node get_colors: {e}', 'ERROR')
            return None # Or handle error appropriately

        # Return the result from the final node in the flow
        return node_results.get('get_colors_node')

    def get_all_themes(self, *args, **kwargs):
        # This entire method was translated from a visual workflow.
        kernel = self.kernel
        log = self.logger
        payload = {'data': {'args': args, 'kwargs': kwargs}, 'history': []}
        # Dictionary to store results of each node
        node_results = {}

        # --- Executing Node: get_all_themes ---
        try:
            current_payload = payload
            def temp_func(payload, log, kernel, args, json, os, importlib):
                # This node replicates the logic of ThemeManagerService.load_all_themes()
                # and returns the result for the UI to use.
                
                themes_path = kernel.themes_path
                loaded_themes = {}
                
                if not os.path.isdir(themes_path):
                    # Return a default theme if the folder doesn't exist
                    return {"flowork_default": {"name": "Flowork Default", "colors": {}}}
                
                for filename in os.listdir(themes_path):
                    if filename.endswith(".json"):
                        filepath = os.path.join(themes_path, filename)
                        try:
                            with open(filepath, 'r', encoding='utf-8') as f:
                                theme_data = json.load(f)
                                theme_id = os.path.splitext(filename)[0]
                                if "name" in theme_data and "colors" in theme_data:
                                    loaded_themes[theme_id] = {
                                        "name": theme_data["name"],
                                        "colors": theme_data["colors"],
                                        "path": filepath
                                    }
                        except Exception as e:
                            log(f'ThemeManagerWorkflow: Failed to load theme {filename}: {e}', 'ERROR')
                
                # Ensure the default theme always exists as a fallback
                if "flowork_default" not in loaded_themes:
                    loaded_themes["flowork_default"] = {
                        "name": "Flowork Default",
                        "colors": {}
                    }
                
                return loaded_themes
            node_results['get_all_themes_node'] = temp_func(current_payload, log, kernel, current_payload.get('data',{}).get('args', []), json, os, importlib.util)
        except Exception as e:
            self.logger(f'Error executing node get_all_themes: {e}', 'ERROR')
            return None # Or handle error appropriately

        # Return the result from the final node in the flow
        return node_results.get('get_all_themes_node')
