{
    "marketplace_page_title": "Marketplace",
    "marketplace_install_btn": "Install from Zip...",
    "marketplace_disable_btn": "Disable Selected",
    "marketplace_enable_btn": "Enable Selected",
    "marketplace_uninstall_btn": "Uninstall Selected",
    "marketplace_tab_modules": "Modules",
    "marketplace_tab_plugins": "Plugins",
    "marketplace_tab_widgets": "Widgets",
    "marketplace_col_name": "Name",
    "marketplace_col_version": "Version",
    "marketplace_col_status": "Status",
    "marketplace_restart_needed": "Action successful. A restart is required for changes to take full effect.",
    "marketplace_uninstall_confirm": "Are you sure you want to uninstall '{component_name}'? This action cannot be undone.",
    "marketplace_install_dialog_title": "Select Component Zip File",
    "menu_title_prompt_manager": "Prompt Manager",
    "prompt_manager_editor_title": "Prompt Editor",
    "prompt_manager_name_label": "Template Name:",
    "prompt_manager_content_label": "Template Content:",
    "button_save_changes": "Save Changes",
    "prompt_manager_tutorial_title": "Guide & How-To",
    "prompt_manager_tutorial_content": "**Concept:**\nThe Prompt Manager is your \"recipe book\" for AI. Store complex and frequently used prompt templates here so they can be reused across many workflows.\n\n**How to Use:**\n1.  **Create New:** Click 'New' to create a blank template.\n2.  **Fill Details:** Provide a descriptive 'Template Name' and write the prompt's content in the 'Template Content' area.\n3.  **Use Variables:** You can insert dynamic placeholders like `{objective}` or `{user_input}` within the content. These placeholders will later be filled by data from the payload when the workflow runs.\n4.  **Save:** Click 'Save Changes' to save your template to the database.\n5.  **Use in a Workflow:** On the canvas, use the 'Prompt Template' module to select and load the template you've saved.",
    "model_converter_guide_title": "Model Factory Guide & Concepts",
    "model_converter_guide_content": "**IMPORTANT: THE BRIDGE FROM TRAINING TO USAGE**\nAfter you fine-tune an AI model using the **AI Trainer**, the result is a **Hugging Face (HF) model folder**. This folder cannot be used directly by Flowork for inference (running tasks). You **MUST** use this page to convert it into the efficient **GGUF** format.\n\n**Concept:**\nThe Model Factory is your \"foundry\" for converting and optimizing AI models to run efficiently locally. The main process is **quantization**, which shrinks the model's size with minimal precision loss, making it much faster and memory-friendly.\n\n**Tab 1: Convert HF to GGUF**\nUse this for models from the **AI Trainer** or models you've downloaded from Hugging Face.\n1.  **Fine-Tuned Model Folder:** Select the HF model folder you have prepared in `ai_models/text`.\n2.  **New .gguf Filename:** Give a name for the converted file (without `.gguf`).\n3.  **Quantization Method:** Choose the compression level. **Q4_K_M** is a balanced choice between size and quality.\n\n**Tab 2: Re-Quantize Existing GGUF**\nUse this if you already have a `.gguf` file but want to make it even smaller.\n1.  **Source .gguf File:** Select the `.gguf` file you want to re-quantize.\n2.  **New Quantized Filename:** Give a new name for the quantized output file.",
    "ai_trainer_guide_title": "AI Training Guide & Workflow",
    "ai_trainer_guide_content": "**Concept:**\nThe AI Trainer is your facility for *fine-tuning*‚Äîretraining an existing AI model with your specific data. The goal is to make the AI an \"expert\" on a particular topic or style you desire.\n\n**The Training Workflow (MANDATORY):**\n1.  **Prepare Data (Here):**\n    - Create a new dataset (e.g., `chatbot_training_data`).\n    - Fill the dataset with `question;answer` format, one per line. The more high-quality data you provide, the smarter the AI will become.\n2.  **Train the Model (Here):**\n    - Select a 'Base Model' (the foundation model to train).\n    - Choose the 'Dataset' you just prepared.\n    - Give your new model a name (e.g., `chatbot_v1`).\n    - Click 'Start Fine-Tuning Job'. This process will output a **model folder** in `ai_models/text/chatbot_v1`.\n3.  **Convert the Model (in Model Factory):**\n    - **THIS IS THE CRUCIAL STEP.** The trained model is not yet usable.\n    - Go to the **Model Factory** page -> **Convert HF to GGUF** tab.\n    - Select your model folder (`chatbot_v1`).\n    - Provide an output filename (e.g., `chatbot_v1_q4`).\n    - Click 'Start Conversion'. This will produce a single file: `chatbot_v1_q4.gguf`.\n4.  **Use the Model:**\n    - This `chatbot_v1_q4.gguf` file is now ready to be selected and used in AI modules within Flowork.",
    "generator_guide_title": "Module Factory Guide",
    "generator_guide_content": "**Concept:**\nThe Module Factory is your advanced \"workshop\" for creating your own Flowork modules without writing lots of boilerplate code. You can visually design the properties interface (UI) and define its logic.\n\n**Module Creation Workflow:**\n1.  **Design Properties (Tab 1 - Left):**\n    - Drag & drop UI components from the Toolbox onto the design canvas.\n    - Click a component on the canvas to edit its properties in the bottom-right panel (ID, Label, etc.).\n    - The ID will become the key in the `config` dictionary when your module is executed.\n2.  **Design Logic (Tab 2 - Left):**\n    - Design your module's internal execution flow on this canvas.\n    - Use the `Set Variable` node as an input to get values from the properties you designed. Example: `config.get('your_component_id')`.\n    - The final result of this logic flow will be the output of your module.\n3.  **Fill in Module Info (Top-Right Panel):**\n    - Give your module a name, description, and author info. A Unique ID will be generated automatically.\n4.  **Finalize & Generate (Bottom-Right Panel):**\n    - Click the 'Generate Module ZIP File' button.\n    - Name and save your .zip file.\n5.  **Installation:**\n    - Go to the **Addon Manager** page, click 'Install from Zip...', and select the .zip file you just created.",
    "core_editor_guide_title": "Core Editor Guide & Concepts",
    "core_editor_guide_content": "**Core Concept:**\nThe Core Editor is a \"Meta-Developer\" mode. Here, you are not creating a regular workflow; you are designing the **internal logic of a Service** itself. The Service you create here will be loaded by the Kernel when the application first starts.\n\n**Anatomy of a Service:**\n- **Filename (`service_name.flowork`):** Becomes the base for the Python Class name (e.g., `ServiceNameService`).\n- **Each Flow:** Every flow that has no input (a starting node) will be translated into a **method** within that Service Class. The method name is taken from the starting node's name.\n- **Return Value:** The `payload` from the final node in a flow becomes the `return value` of that method.\n\n**Design Workflow:**\n1.  **Select Service:** Choose the `.flowork` file from the dropdown above.\n2.  **Design Logic:** Drag & drop modules from the Toolbox onto the canvas to build the method's logic.\n3.  **Use `Function Runner (Nano)`:** This module is your main workhorse. The Python code inside it becomes the body of your service method. The variables `payload`, `log`, `kernel`, and `args` are automatically available.\n4.  **Save Changes:** Click the \"Save Changes\" button. This overwrites the `.flowork` file.\n5.  **Compile!:** Open the `Core Compiler` module, select the service you just edited, and run it. This will regenerate the `service.py` file in the `generated_services` folder.\n\n**IMPORTANT WARNING:**\nBecause you are editing core logic, a mistake here can cause the **application to fail on startup**. Always back up the `.flowork` file before making major changes.",
    "ai_architect_guide_title": "AI Architect Guide",
    "ai_architect_guide_content": "**Core Concept:**\nThe AI Architect is your magic translator. It converts plain human language commands into a ready-to-use visual workflow. You simply describe what you want, and the AI will attempt to design the nodes for you.\n\n**PRIMARY REQUIREMENT (MANDATORY!):**\nThis feature **fully depends** on the AI model you configure on the **Settings -> Default AI Model Configuration -> Text & Analysis** page. Ensure you have selected an AI provider (like Gemini) or a local GGUF model there. Otherwise, the AI Architect won't know who to ask and will fail.\n\n**How to Use:**\n1.  **Write Command:** In the main text box, clearly write the objective for your workflow.\n2.  **Click Generate:** Press the \"üöÄ Generate Workflow\" button.\n3.  **Wait:** The AI will think and design the workflow. This might take a moment.\n4.  **New Tab:** If successful, a new tab will open with the generated workflow.\n\n**Tips for Effective Prompts:**\n-   **Be Specific:** The more detailed your command, the better the result. Mention module names if you know them (e.g., \"use the *Advanced Web Scraper*\").\n-   **Mention URLs:** If it involves the web, provide the full URL (e.g., \"from the website *cnn.com*\").\n-   **Clear Sequence:** Explain the steps. Example: \"First, get data from an API. Second, filter for data containing the word 'important'. Third, save the results to a CSV file.\"",
    "button_new": "New",
    "button_delete": "Delete",
    "marketplace_install_community_btn": "Install from Community",
    "theme_manager_guide_title": "Theme Manager Guide",
    "theme_manager_guide_content": "**Concept:**\nThis is where you manage the look and feel of your Flowork application. A theme is a simple `.json` file that defines the color palette for all UI components.\n\n**How to Use:**\n1.  **Viewing Themes:** All installed themes will appear in the list.\n2.  **Editing a Theme:** Click the pencil icon (‚úèÔ∏è) to open the theme's `.json` file in your default text editor. You can change the color hex values there. Save the file to see the changes (an application restart may be required).\n3.  **Deleting a Theme:** Click the cross icon (‚ùå) to delete a theme. The default theme cannot be deleted.\n4.  **Uploading a New Theme:** Use the 'Upload Theme' button to add a new theme `.json` file from your computer.\n\n**Tips:**\n-   You can duplicate an existing theme file, rename it, and edit it to create a new theme quickly.\n-   Share your theme `.json` files with other users!",
    "diagnostics_guide_title": "System Diagnostics Guide",
    "diagnostics_guide_content": "**Concept:**\nThis is the \"engine room\" of Flowork. This tool runs a series of automated scans to check the \"health\" and integrity of the application's internal code, manifests, and caches.\n\n**Purpose:**\n-   **Find Regressions:** Ensures that new updates or changes do not break the stable core architecture.\n-   **Maintain Code Quality:** Automatically detects if any modules are not following standards (e.g., missing a `TIER` attribute).\n-   **Advanced Debugging:** Helps developers find hidden issues like missing files or corrupted caches.\n\n**How to Use:**\n1.  **Select Scanners:** Check which scanners you want to run from the list on the left.\n2.  **Run Scan:** Click 'Run Selected' or 'Run All'.\n3.  **View Report:** The results will appear in the right-hand panel. Pay attention to the levels: **CRITICAL** and **MAJOR** are serious issues that should be fixed immediately."
}