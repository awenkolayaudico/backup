{
    "nodes": [
        {
            "id": "get_all_themes_node",
            "name": "get_all_themes",
            "module_id": "function_runner_module",
            "x": 150,
            "y": 100,
            "config_values": {
                "python_code": "# This node replicates the logic of ThemeManagerService.load_all_themes()\n# and returns the result for the UI to use.\n\nthemes_path = kernel.themes_path\nloaded_themes = {}\n\nif not os.path.isdir(themes_path):\n    # Return a default theme if the folder doesn't exist\n    return {\"flowork_default\": {\"name\": \"Flowork Default\", \"colors\": {}}}\n\nfor filename in os.listdir(themes_path):\n    if filename.endswith(\".json\"):\n        filepath = os.path.join(themes_path, filename)\n        try:\n            with open(filepath, 'r', encoding='utf-8') as f:\n                theme_data = json.load(f)\n                theme_id = os.path.splitext(filename)[0]\n                if \"name\" in theme_data and \"colors\" in theme_data:\n                    loaded_themes[theme_id] = {\n                        \"name\": theme_data[\"name\"],\n                        \"colors\": theme_data[\"colors\"],\n                        \"path\": filepath\n                    }\n        except Exception as e:\n            log(f'ThemeManagerWorkflow: Failed to load theme {filename}: {e}', 'ERROR')\n\n# Ensure the default theme always exists as a fallback\nif \"flowork_default\" not in loaded_themes:\n    loaded_themes[\"flowork_default\"] = {\n        \"name\": \"Flowork Default\",\n        \"colors\": {}\n    }\n\nreturn loaded_themes"
            }
        },
        {
            "id": "get_colors_node",
            "name": "get_colors",
            "module_id": "function_runner_module",
            "x": 150,
            "y": 250,
            "config_values": {
                "python_code": "# ADDED: This node replicates the get_colors() method.\n# It gets the active theme from settings and returns its color data.\nloc = kernel.get_service(\"localization_manager\")\nif not loc:\n    # Fallback if the localization service isn't ready for some reason\n    return {}\n\nactive_theme_id = loc.get_setting(\"theme\", \"flowork_default\")\nthemes_path = kernel.themes_path\ntheme_file = os.path.join(themes_path, f\"{active_theme_id}.json\")\n\nif not os.path.exists(theme_file):\n    # Fallback to default if the specific theme file is missing\n    theme_file = os.path.join(themes_path, \"flowork_default.json\")\n    if not os.path.exists(theme_file):\n        return {}\n\ntry:\n    with open(theme_file, 'r', encoding='utf-8') as f:\n        theme_data = json.load(f)\n    return theme_data.get(\"colors\", {})\nexcept Exception as e:\n    log(f'ThemeManagerWorkflow(get_colors): Error loading theme file {active_theme_id}: {e}', 'ERROR')\n    return {}"
            }
        }
    ],
    "connections": []
}